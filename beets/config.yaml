# config file written for beets v1.3.1
# path of this file: $HOME/.config/beets/

directory: ~/music
library: ~/music/beetslibrary.blb

# plugins
#
# A space-separated list of plugin module names to load. For instance, beets
# includes the BPD plugin for playing music.

# pluginpath
#
# Directories to search for plugins. These paths are just added to sys.path
# before the plugins are loaded. (The plugins still have to be contained in
# a beetsplug namespace package.) This can either be a single string or a list
# of strings—so, if you have multiple paths, format them as a YAML list like
# so:
#
# pluginpath:
#     - /path/one
#     - /path/two
# example: pluginpath: ~/beets/myplugins

# import
#
# importing should never move or copy files but instead just correct the tags
# on music. Put the line copy: no under the import: heading in your config file
# to disable any copying or renaming. Make sure to point directory at the place
# where your music is currently stored.
import:
    #move: yes
    #copy: no
    timid: no
    log: beetslog
    languages: en

# art_filename
#
# When importing album art, the name of the file (without extension) where the
# cover art image should be placed. This is a template string, so you can use
# any of the syntax available to Path Formats. Defaults to cover (i.e., images
# will be named cover.jpg or cover.png and placed in the album’s directory).

# threaded
#
# Either yes or no, indicating whether the autotagger should use multiple
# threads. This makes things faster but may behave strangely. Defaults to yes.

# color
#
# Either yes or no; whether to use color in console output (currently only in
# the import command). Turn this off if your terminal doesn’t support ANSI
# colors.
color: yes

# ignore
#
# A list of glob patterns specifying file and directory names to be ignored
# when importing. By default, this consists of .*, *~, and System Volume
# Information (i.e., beets ignores Unix-style hidden files, backup files, and
# a directory that appears at the root of some Windows filesystems).
ignore: .AppleDouble ._* *~ .DS_Store *.txt *.db

# replace
#
# A set of regular expression/replacement pairs to be applied to all filenames
# created by beets. Typically, these replacements are used to avoid confusing
# problems or errors with the filesystem (for example, leading dots, which hide
# files on Unix, and trailing whitespace, which is illegal on Windows). To
# override these substitutions, specify a mapping from regular expression to
# replacement strings. For example, [xy]: z will make beets replace all
# instances of the characters x or y with the character z.
#
# If you do change this value, be certain that you include at least enough
# substitutions to avoid causing errors on your operating system. Here are the
# default substitutions used by beets, which are sufficient to avoid unexpected
# behavior on all popular platforms:
#
# replace:
#     '[\\/]': _
#     '^\.': _
#     '[\x00-\x1f]': _
#     '[<>:"\?\*\|]': _
#     '\.$': _
#     '\s+$': ''
#
#  These substitutions remove forward and back slashes, leading dots, and
#  control characters—all of which is a good idea on any OS. The fourth line
#  removes the Windows “reserved characters” (useful even on Unix for for
#  compatibility with Windows-influenced network filesystems like Samba).
#  Trailing dots and trailing whitespace, which can cause problems on Windows
#  clients, are also removed.
replace:
    '^\.': ''
    '^\s+': ''
    '[<>:"\?\*\|,]': _
    "'": _
    '[\s+]': _ 
    '[àäâ]': a
    '[éèë]': e
    '[ïî]': i
    '[öô]': o
    '[üûù]': u
    '_+': _

# id3v23
#
# By default, beets writes MP3 tags using the ID3v2.4 standard, the latest
# version of ID3. Enable this option to instead use the older ID3v2.3 standard,
# which is pre‐ ferred by certain older software such as Windows Media Player.
id3v23: yes

# Path Format Configuration
#
# You can also configure the directory hierarchy beets uses to store music.
# These settings appear under the paths: key. Each string is a template string
# that can refer to metadata fields like $artist or $title. The filename
# extension is added automatically. At the moment, you can specify three
# special paths: default for most releases, comp for “various artist” releases
# with no dominant artist, and singleton for non-album tracks. The defaults
# look like this:
#
# paths:
#     default: $albumartist/$album%aunique{}/$track $title
#     singleton: Non-Album/$artist/$title
#     comp: Compilations/$album%aunique{}/$track $title
#
# Note the use of $albumartist instead of $artist; this ensure that albums will
# be well-organized. For more about these format strings, see Path Formats. The
# aunique{} function ensures that identically-named albums are placed in
# different directories; see Album Disambiguation for details.
#
# In addition to default, comp, and singleton, you can condition path queries
# based on beets queries (see Queries). This means that a config file like
# this:
#
# paths:
#     albumtype:soundtrack: Soundtracks/$album/$track $title
#
#  will place soundtrack albums in a separate directory. The queries are tested
#  in the order they appear in the configuration file, meaning that if an item
#  matches multiple queries, beets will use the path format for the first
#  matching query.
#
#  Note that the special singleton and comp path format conditions are, in
#  fact, just shorthand for the explicit queries singleton:true and comp:true.
#  In contrast, default is special and has no query equivalent: the default
#  format is only used if no queries match.
paths:
    default: %lower{$albumartist/$album%aunique{}-$year/$track-$title}
    singleton: %lower{$albumartist-$title-$year}
    comp: %lower{compilations/$album%aunique{}-$year/$track-$title}
